services:
  # A mock implementation of an oauth2\openid authorization-server.
  # Must add 127.0.0.1 mock-oauth2-service to hosts file in order for issuer to be correct when testing from host.
  mock-oauth2-service:
    image: ghcr.io/navikt/mock-oauth2-server:0.3.4
    ports: [ 8081:8081 ]
    expose: [ 8081 ]
    environment:
      SERVER_PORT: 8081
      JSON_CONFIG_PATH: /etc/oauth-mock-config.json
      VIRTUAL_HOST: mock-oauth2.local.gl
      VIRTUAL_PORT: 8081
    volumes:
      - ./config/oauth-mock-config.json:/etc/oauth-mock-config.json

  # EventStore provides a REST API to store and retrieve Events (FHIR Messages).
  hops-eventstore:
    build:
      context: ..
      args:
        project: hops-eventstore
    depends_on: [ mock-oauth2-service, postgres, local-proxy ]
    restart: on-failure
    expose: [ 8080 ]
    environment:
      DB_HOST: postgres
      VIRTUAL_HOST: hops-eventstore.local.gl
      VIRTUAL_PORT: 8080

  # EventSink consumes FHIR-messages on Kafka from NAV services and publishes them to EventStore.
  hops-eventsinkkafka:
    build:
      context: ..
      args:
        project: hops-eventsinkkafka
    depends_on: [ kafka, hops-eventstore, local-proxy ]
    expose: [ 8080 ]
    environment:
      KAFKA_BROKERS: kafka:9093
      HOPS_EVENTSTORE_BASE_URL: http://hops-eventstore:8080
      VIRTUAL_HOST: hops-eventsinkkafka.local.gl
      VIRTUAL_PORT: 8080

  # EventReplay polls FHIR-messages from EventStore and publishes them on Kafka.
  hops-eventreplaykafka:
    build:
      context: ..
      args:
        project: hops-eventreplaykafka
    depends_on: [ kafka, hops-eventstore, local-proxy ]
    expose: [ 8080 ]
    environment:
      KAFKA_BROKERS: kafka:9093
      HOPS_EVENTSTORE_BASE_URL: http://hops-eventstore:8080
      VIRTUAL_HOST: hops-eventreplaykafka.local.gl
      VIRTUAL_PORT: 8080

  # The FHIR REST API exposed to external consumers, e.g. EHRs.
  hops-api:
    build:
      context: ..
      args:
        project: hops-api
    depends_on: [ hops-eventstore, local-proxy ]
    restart: on-failure
    expose: [ 8080 ]
    environment:
      HOPS_EVENTSTORE_BASE_URL: http://hops-eventstore:8080
      VIRTUAL_HOST: hops-api.local.gl
      VIRTUAL_PORT: 8080

  # FileShare provides an API to upload and download binary files. These files can be referenced in FHIR-messages.
  hops-fileshare:
    build:
      context: ..
      args:
        project: hops-fileshare
    depends_on: [ gcs-mock-filestore, local-proxy ]
    restart: on-failure
    expose: [ 8080 ]
    environment:
      HOPS_FILESTORAGE_BASE_URL: http://gcs-mock-filestore:4443
      VIRTUAL_HOST: hops-fileshare.local.gl
      VIRTUAL_PORT: 8080

  hops-test-e2e:
    build:
      context: ..
      args:
        project: hops-test-e2e
    depends_on: [ local-proxy, mock-oauth2-service ]
    restart: on-failure
    expose: [ 8080 ]
    environment:
      API_HOST: http://hops-api.local.gl:8080
      EVENT_REPLAY_KAFKA_HOST: http://hops-eventreplaykafka.local.gl:8080
      EVENT_SINK_KAFKA_HOST: http://hops-eventsinkkafka.local.gl:8080
      EVENT_STORE_HOST: http://hops-eventstore.local.gl:8080
      MASKINPORTEN_WELL_KNOWN_URL: http://mock-oauth2.local.gl:8081/default/.well-known/openid-configuration
      MASKINPORTEN_CLIENT_ID: test-client-id
      MASKINPORTEN_CLIENT_SECRET: test-client-jwk
      MASKINPORTEN_CLIENT_JWK: todo
      MASKINPORTEN_SCOPES: test
      VIRTUAL_HOST: hops-test-e2e.local.gl
      VIRTUAL_PORT: 8080

  # Mock implementation of the GCS server
  gcs-mock-filestore:
    image: fsouza/fake-gcs-server
    ports: [ 4443:4443 ]
    command: "-scheme http"
    volumes:
      - fakestorage_volume:/data

  # This container creates the bucket that is automatically created by the NAIS platform
  gcs-mock-filestore-setup:
    image: byrnedo/alpine-curl
    depends_on: [ gcs-mock-filestore ]
    restart: "no"
    command: "--request POST 'http://gcs-mock-filestore:4443/storage/v1/b?project=helseopplysingner-dev' --header 'Content-Type: application/json' --data-raw '{\"name\": \"hops\"}'"

  gcs-mock-filestore-setup-unscanned:
    image: byrnedo/alpine-curl
    depends_on: [ gcs-mock-filestore ]
    restart: "no"
    command: "--request POST 'http://gcs-mock-filestore:4443/storage/v1/b?project=helseopplysingner-dev' --header 'Content-Type: application/json' --data-raw '{\"name\": \"hops-unscanned\"}'"


  # PostgreSQL is the database used by EventStore.
  postgres:
    image: postgres
    ports: [ 5432:5432 ]
    volumes:
      - postgres_volume:/data/postgres
    environment:
      POSTGRES_PASSWORD: Welcome01
      PGDATA: /data/postgres

  # Zookeeper keeps track of status of the Kafka cluster nodes, topics, partitions etc.
  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports: [ 2181:2181 ]

  # Apache Kafka broker.
  kafka:
    image: wurstmeister/kafka
    depends_on: [ zookeeper ]
    ports: [ 9092:9092 ]
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://:9093,OUTSIDE://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_CREATE_TOPICS: "helseopplysninger.rapid:1:1,helseopplysninger.river:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # Kafdrop is a web UI for viewing Kafka topics and browsing consumer groups.
  kafdrop:
    image: obsidiandynamics/kafdrop
    depends_on: [ kafka ]
    ports: [ 9000:9000 ]
    profiles: [ debug ]
    environment:
      KAFKA_BROKERCONNECT: kafka:9093

  # pgAdmin provides an administration web UI for PostgreSQL.
  pgadmin:
    image: dpage/pgadmin4
    depends_on: [ postgres ]
    ports: [ 5050:80 ]
    volumes:
      - pgadmin_volume:/root/.pgadmin
      - ./config:/etc/hopsconfig:ro
    profiles: [ debug ]
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_SERVER_JSON_FILE: /etc/hopsconfig/pgadmin.json

  local-proxy:
    image: nginxproxy/nginx-proxy:alpine
    ports: [ 8080:80 ]
    environment:
      DHPARAM_GENERATION: 'false'
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro

volumes:
  postgres_volume:
  pgadmin_volume:
  fakestorage_volume:
