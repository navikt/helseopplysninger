services:
  # A mock implementation of an oauth2\openid authorization-server.
  # Must add 127.0.0.1 mock-oauth2-service to hosts file in order for issuer to be correct when testing from host.
  mock-oauth2-service:
    image: ghcr.io/navikt/mock-oauth2-server:0.3.4
    ports: [8081:8081]
    environment:
      SERVER_PORT: 8081
      JSON_CONFIG_PATH: /etc/oauth-mock-config.json
    volumes:
      - ./config/oauth-mock-config.json:/etc/oauth-mock-config.json

  # EventStore provides a REST API to store and retrieve Events (FHIR Messages).
  eventstore:
    build:
      context: ..
      args:
        project: hops-eventstore
    depends_on: [mock-oauth2-service, postgres]
    restart: on-failure
    ports: [8082:8080]
    environment:
      DB_HOST: postgres

  # EventSink consumes FHIR-messages on Kafka from NAV services and publishes them to EventStore.
  eventsink:
    build:
      context: ..
      args:
        project: hops-eventsinkkafka
    depends_on: [kafka, eventstore]
    ports: [8083:8080]
    environment:
      KAFKA_BROKERS: kafka:9093
      HOPS_EVENTSTORE_BASE_URL: http://eventstore:8080

  # EventReplay polls FHIR-messages from EventStore and publishes them on Kafka.
  eventreplay:
    build:
      context: ..
      args:
        project: hops-eventreplaykafka
    depends_on: [kafka, eventstore]
    ports: [8084:8080]
    environment:
      KAFKA_BROKERS: kafka:9093
      HOPS_EVENTSTORE_BASE_URL: http://eventstore:8080

  # The FHIR REST API exposed to external consumers, e.g. EHRs.
  api:
    build:
      context: ..
      args:
        project: hops-api
    depends_on: [eventstore]
    restart: on-failure
    ports: [8085:8080]
    environment:
      HOPS_EVENTSTORE_BASE_URL: http://eventstore:8080

  # FileShare provides an API to upload and download binary files. These files can be referenced in FHIR-messages.
  fileshare:
    build:
      context: ..
      args:
        project: hops-fileshare
    restart: on-failure
    ports: [ 8086:8080 ]

  # PostgreSQL is the database used by EventStore.
  postgres:
    image: postgres
    ports: [5432:5432]
    volumes:
      - postgres_volume:/data/postgres
    environment:
      POSTGRES_PASSWORD: Welcome01
      PGDATA: /data/postgres

  # Zookeeper keeps track of status of the Kafka cluster nodes, topics, partitions etc.
  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports: [2181:2181]

  # Apache Kafka broker.
  kafka:
    image: wurstmeister/kafka
    depends_on: [zookeeper]
    ports: [9092:9092]
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://:9093,OUTSIDE://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_CREATE_TOPICS: "helseopplysninger.rapid:1:1,helseopplysninger.river:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # Kafdrop is a web UI for viewing Kafka topics and browsing consumer groups.
  kafdrop:
    image: obsidiandynamics/kafdrop
    depends_on: [kafka]
    ports: [9000:9000]
    profiles: [debug]
    environment:
      KAFKA_BROKERCONNECT: kafka:9093

  # pgAdmin provides an administration web UI for PostgreSQL.
  pgadmin:
    image: dpage/pgadmin4
    depends_on: [postgres]
    ports: [5050:80]
    volumes:
      - pgadmin_volume:/root/.pgadmin
      - ./config:/etc/hopsconfig:ro
    profiles: [debug]
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_SERVER_JSON_FILE: /etc/hopsconfig/pgadmin.json

volumes:
  postgres_volume:
  pgadmin_volume:
